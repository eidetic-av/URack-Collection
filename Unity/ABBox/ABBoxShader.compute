#pragma kernel ABBox

Texture2D<float4> InputPositions;
Texture2D<float4> InputColors;

RWTexture2D<float4> InsidePositions;
RWTexture2D<float4> InsideColors;
RWTexture2D<float4> OutsidePositions;
RWTexture2D<float4> OutsideColors;

float MinX;
float MinY;
float MinZ;
float MaxX;
float MaxY;
float MaxZ;

[numthreads(8,8,1)]
void ABBox (uint3 id : SV_DispatchThreadID)
{
    float x = InputPositions[id.xy].x;
    float y = InputPositions[id.xy].y;
    float z = InputPositions[id.xy].z;

    float r = InputColors[id.xy].x;
    float g = InputColors[id.xy].y;
    float b = InputColors[id.xy].z;
    float a = InputColors[id.xy].w;

    bool inside = ((x < MaxX && x > MinX) && (y < MaxY && y > MinY) && (x < MaxZ && z > MinZ));

    // fill the matching map (inside or outside) with the correct
    // positions and colors, and fill the other one with dummy values

    if (inside)
    {
        InsidePositions[id.xy] = float4(x, y, z, 1.0);
        InsideColors[id.xy] = float4(r, g, b, a);
        OutsidePositions[id.xy] = float4(0, 0, 0, 0);
        OutsideColors[id.xy] = float4(0, 0, 0, 0);
    }
    else
    {
        OutsidePositions[id.xy] = float4(x, y, z, 1.0);
        OutsideColors[id.xy] = float4(r, g, b, a);
        InsidePositions[id.xy] = float4(0, 0, 0, 0);
        InsideColors[id.xy] = float4(0, 0, 0, 0);
    }
}
